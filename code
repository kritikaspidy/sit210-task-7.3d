import RPi.GPIO as GPIO
import time

# Set GPIO pin numbers
TRIG_PIN = 11  # Using physical pin numbers (GPIO.BOARD mode)
ECHO_PIN = 13
LED_PIN = 12 # Using GPIO18 for PWM

# Initialize GPIO settings
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(TRIG_PIN, GPIO.OUT)
GPIO.setup(ECHO_PIN, GPIO.IN)
GPIO.setup(LED_PIN, GPIO.OUT)

# Create a PWM object for LED control
led_pwm = GPIO.PWM(LED_PIN, 100)  # Frequency: 100 Hz
led_pwm.start(0)  # Start with 0% duty cycle (LED off)

def measure_distance():
    # Send a pulse to trigger the sensor
    GPIO.output(TRIG_PIN, True)
    time.sleep(0.00001)
    GPIO.output(TRIG_PIN, False)

    # Measure the time it takes for the echo to return
    while GPIO.input(ECHO_PIN) == 0:
        pulse_start = time.time()
    while GPIO.input(ECHO_PIN) == 1:
        pulse_end = time.time()

    # Calculate distance in centimeters
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150

    return distance

try:
    while True:
            distance = measure_distance()
            scale = 15     
            Duty_Cycle = 100 - int(distance*scale) 
            Duty_Cycle = max(0,min(100,Duty_Cycle)) # returns the max value among 0 and the min of the duty cycle
            led_pwm.ChangeDutyCycle(Duty_Cycle)

            
      

            print(f"Distance: {distance:.2f} cm")

            time.sleep(0.1)  # Adjust the delay based on your requirements

except KeyboardInterrupt:
    led_pwm.stop()  # Stop PWM on Ctrl+C exit
    GPIO.cleanup()  # Clean up GPIO settings
